import os, shutil
from string import Template
import time
import yaml


# configuration
configfile : "defaults.yml"
try:
  with open(r'user.yml') as file:
    _config = yaml.load(file, Loader=yaml.FullLoader)
  for __config in config:
    if __config in _config:
        config[__config] = _config[__config]
except:
  pass


MC_PROD = config['MC_PROD']
SAMPLES = config['SAMPLES']
APPCONFIGOPTS = config['some_paths']['APPCONFIGOPTS'].format(
                    cvmfs=config['some_paths']['CVMFS'],
                    appconfig_version=config['general']['appconfig_version'])
DECFILESROOT = config['some_paths']['DECFILESROOT'].format(
                    cvmfs=config['some_paths']['CVMFS'],
                    decfiles_version=config['general']['decfiles_version'])

# to control the amount of simultation to be done
nevts = config['number_of_events']
nbunchs = config['number_of_bunchs']

# flag and versions onlu contain numbers and letters
wildcard_constraints:
    flag = "[A-Za-z0-9@]+",
    bunch = "[0-9]+",
    ext = "(dst|mdst|ldst)",
    eventtype = "[0-9]+",
    gaussversion = "[A-Za-z0-9@]+",
    booleversion = "[A-Za-z0-9@]+",
    mooreversion = "[A-Za-z0-9@]+",
    brunelversion = "[A-Za-z0-9@]+",
    davinciversion = "[A-Za-z0-9@]+"


# include different Snakefiles for each part of the Simulation
include: "gauss/Snakefile"
include: "boole/Snakefile"
include: "moore/Snakefile"
include: "brunel/Snakefile"
include: "davinci/Snakefile"


rule merge_root:
  input:
    expand(SAMPLES + '/{{eventtype}}/{{year}}/{{magnet}}/{{flag}}_G{{gaussversion}}_B{{booleversion}}_M2{{mooreversion}}_B{{brunelversion}}_D{{davinciversion}}_S{{strippingline}}/{bunch}.root',
           bunch=range(1,config['number_of_bunchs']+1))
  output:
    SAMPLES + '/{eventtype}/{year}/{magnet}/{flag}_G{gaussversion}_B{booleversion}_M2{mooreversion}_B{brunelversion}_D{davinciversion}_S{strippingline}/tuple.root'
  log:
    SAMPLES + '/{eventtype}/{year}/{magnet}/{flag}_G{gaussversion}_B{booleversion}_M2{mooreversion}_B{brunelversion}_D{davinciversion}_S{strippingline}/merging_tuple.log'
  run:
    # inputs = " ".join(f"{input}")
    shell(f"(time hadd {output} {input}) &> {log}")
